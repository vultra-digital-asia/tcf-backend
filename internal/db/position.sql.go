// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: position.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPosition = `-- name: CreatePosition :one
INSERT INTO positions (id, name)
VALUES ($1, $2)
RETURNING id, name, deleted_at, created_at, updated_at, hierarchy_level
`

type CreatePositionParams struct {
	ID   uuid.UUID
	Name pgtype.Text
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) (Position, error) {
	row := q.db.QueryRow(ctx, createPosition, arg.ID, arg.Name)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HierarchyLevel,
	)
	return i, err
}

const getManyPosition = `-- name: GetManyPosition :many
SELECT id, name, deleted_at, created_at, updated_at, hierarchy_level FROM positions
WHERE
    (name ILIKE '%' || COALESCE($3, '') || '%')
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetManyPositionParams struct {
	Limit  int32
	Offset int32
	Name   pgtype.Text
}

func (q *Queries) GetManyPosition(ctx context.Context, arg GetManyPositionParams) ([]Position, error) {
	rows, err := q.db.Query(ctx, getManyPosition, arg.Limit, arg.Offset, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HierarchyLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPositionById = `-- name: GetPositionById :one
select id, name, deleted_at, created_at, updated_at, hierarchy_level from positions where id = $1
`

func (q *Queries) GetPositionById(ctx context.Context, id uuid.UUID) (Position, error) {
	row := q.db.QueryRow(ctx, getPositionById, id)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HierarchyLevel,
	)
	return i, err
}

const updatePosition = `-- name: UpdatePosition :one
UPDATE positions
SET name = COALESCE($2, name)
WHERE id = $1
RETURNING id, name, deleted_at, created_at, updated_at, hierarchy_level
`

type UpdatePositionParams struct {
	ID   uuid.UUID
	Name pgtype.Text
}

func (q *Queries) UpdatePosition(ctx context.Context, arg UpdatePositionParams) (Position, error) {
	row := q.db.QueryRow(ctx, updatePosition, arg.ID, arg.Name)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HierarchyLevel,
	)
	return i, err
}
